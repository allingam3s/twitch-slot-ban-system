import type { Express } from "express";
import { createServer, type Server } from "http";
import { WebSocketServer, WebSocket } from "ws";
import { storage } from "./storage";
import { insertBannedSlotSchema, type WebSocketMessage } from "@shared/schema";
import { BanService } from "./services/banService";
import { TwitchBot } from "./services/twitchBot";
export async function registerRoutes(app: Express): Promise<Server> {
  const httpServer = createServer(app);
  const wss = new WebSocketServer({ 
    server: httpServer, 
    path: '/ws' 
  });
  const clients = new Set<WebSocket>();
  wss.on('connection', (ws) => {
    console.log('WebSocket client connected');
    clients.add(ws);
    ws.on('close', () => {
      console.log('WebSocket client disconnected');
      clients.delete(ws);
    });
    ws.on('error', (error) => {
      console.error('WebSocket error:', error);
      clients.delete(ws);
    });
  });
  function broadcast(message: WebSocketMessage) {
    const messageStr = JSON.stringify(message);
    clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(messageStr);
      }
    });
  }
  const banService = new BanService();
  const twitchBot = new TwitchBot(banService);
  banService.setExpiredCallback((expiredBans) => {
    if (expiredBans.length > 0) {
      broadcast({
        type: 'BAN_EXPIRED',
        data: { expiredBans }
      });
    }
  });
  twitchBot.setStatusChangeCallback((connected) => {
    broadcast({
      type: 'BOT_STATUS',
      data: { connected }
    });
  });
  twitchBot.setBanCommandCallback((slotName, username) => {
    banService.addManualBan(slotName, username).then((newBan) => {
      if (newBan) {
        broadcast({
          type: 'BAN_ADDED',
          data: { ban: newBan }
        });
      }
    });
  });
  await twitchBot.connect();
  app.get("/api/banned-slots", async (req, res) => {
    try {
      const slots = await banService.getAllBannedSlots();
      res.json(slots);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch banned slots" });
    }
  });
  app.post("/api/banned-slots", async (req, res) => {
    try {
      const data = insertBannedSlotSchema.parse(req.body);
      const slot = await banService.addManualBan(data.slotName, data.bannedBy);
      
      if (slot) {
        broadcast({
          type: 'BAN_ADDED',
          data: { ban: slot }
        });
        res.status(201).json(slot);
      } else {
        res.status(400).json({ error: "Slot already banned" });
      }
    } catch (error) {
      res.status(400).json({ error: "Invalid request" });
    }
  });
  app.delete("/api/banned-slots/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      await banService.removeBan(id);
      
      broadcast({
        type: 'BAN_REMOVED',
        data: { id }
      });
      
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ error: "Failed to remove ban" });
    }
  });
  app.get("/api/status", async (req, res) => {
    try {
      const requestsOpen = await banService.getRequestsStatus();
      const botConnected = twitchBot.isConnectedToTwitch();
      const allSlots = await banService.getAllBannedSlots();
      
      res.json({
        requestsOpen,
        botConnected,
        totalBans: allSlots.length
      });
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch status" });
    }
  });
  app.post("/api/toggle-requests", async (req, res) => {
    try {
      const newStatus = await banService.toggleRequestsStatus();
      
      broadcast({
        type: 'STATUS_CHANGED',
        data: { requestsOpen: newStatus }
      });
      
      res.json({ requestsOpen: newStatus });
    } catch (error) {
      res.status(500).json({ error: "Failed to toggle requests" });
    }
  });
  return httpServer;
}